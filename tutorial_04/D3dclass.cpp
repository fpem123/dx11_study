/*
 * D3dclass.cpp : 객체 모듈을 사용하기 위해
 * 링카하는 라이브러리들을 명시
 * 라이브러리들은 DirectX 초기화, 3D 그래픽의 랜더링
 * FPS를 얻거나 GPU정보 같은 하드웨어로의 통신
 * 을 위해 필요한 모든 Direc3D 기능들을 담고 있음
 * 작성일 : 09.27.21
 * 마지막 업데이트 : 10.02.21
 */
#include "d3dclass.h"
#include <fstream>

// 모든 멤버 포인터들을 null로 초기화
D3DClass::D3DClass()
{
	m_swapChain = 0;
	m_device = 0;
	m_deviceContext = 0;
	m_renderTargetView = 0;
	m_depthStencilBuffer = 0;
	m_depthStencilState = 0;
	m_depthStencilView = 0;
	m_rasterState = 0;
}

D3DClass::D3DClass(const D3DClass& other)
{

}

D3DClass::~D3DClass()
{

}

// DirectX 11의 전체 Direct3D 설정이 일어남
// 중요한 코드 뿐만 아니라 나중 튜토리얼을 위한 추가적 코드
// screenWidth, screenHeight : SystemClass에서 만든 윈도우 너비와 높이
// hwnd : 윈도우에 대한 핸들, 이걸 이용해 윈도우에 접근
// fullscreen : 전체화면 동작 여부, 윈도우를 올바로 생성할 때에도 필요
// screenDepth, screenNear : 윈도우에 그려질 3D환경에서의 깊이값
// vsync : Direct3D 렌더링을 수직동기화 할 것인지
bool D3DClass::Initialize(int screenWidth,
	int screenHeight, bool vsync, HWND hwnd,
	bool fullscreen, float screenDepth, float screenNear)
{
	HRESULT result;
	IDXGIFactory* factory;
	IDXGIAdapter* adapter;
	IDXGIOutput* adapterOutput;
	unsigned int numModes, i, numerator, denominator, stringLength;
	DXGI_MODE_DESC* displayModeList;
	DXGI_ADAPTER_DESC adapterDesc;
	int error;
	DXGI_SWAP_CHAIN_DESC swapChainDesc;
	D3D_FEATURE_LEVEL featureLevel;
	ID3D11Texture2D* backBufferPtr;
	D3D11_TEXTURE2D_DESC depthBufferDesc;
	D3D11_DEPTH_STENCIL_DESC depthStencilDesc;
	D3D11_DEPTH_STENCIL_VIEW_DESC depthStencilViewDesc;
	D3D11_RASTERIZER_DESC rasterDesc;
	D3D11_VIEWPORT viewport;
	float fieldOfView, screenAspect;

	// vsync 설정을 저장함
	m_vsync_enabled = vsync;


	// Direct3D를 초기화하기 전에 GPU/모니터 주시율을 알아야함


	// DirectX 그래픽 인터페이스 팩토리를 만듬
	result = CreateDXGIFactory(__uuidof(IDXGIFactory), (void**)&factory);
	if (FAILED(result))
	{
		return false;
	}

	// 팩토리 객체를 사용하여 첫번째 gpu 인터페이스에 대한 어댑터를 만듬
	result = factory->EnumAdapters(0, &adapter);
	if (FAILED(result))
	{
		return false;
	}

	// 출력에 대한 첫번째 어댑터를 나열
	result = adapter->EnumOutputs(0, &adapterOutput);
	if (FAILED(result))
	{
		return false;
	}

	// DXGI_FORMAT_R8G8B8A8_UNORM 모니터 출력 디스플레이 포멧에 맞는
	// 모드의 개수를 구함
	numModes = 0;
	result = adapterOutput->GetDisplayModeList(DXGI_FORMAT_B8G8R8A8_UNORM,
		DXGI_ENUM_MODES_INTERLACED, &numModes, NULL);
	if (FAILED(result))
	{
		return false;
	}

	// 가능한 모든 모니터와 그래픽카드 조합을 저장할 리스트 생성
	displayModeList = new DXGI_MODE_DESC[numModes];
	if (!displayModeList)
	{
		return false;
	}

	// 디스플레이 모드에 대한 리스트 구조를 채워넣음
	result = adapterOutput->GetDisplayModeList(DXGI_FORMAT_R8G8B8A8_UNORM,
		DXGI_ENUM_MODES_INTERLACED, &numModes, displayModeList);
	if (FAILED(result))
	{
		return false;
	}

	// 모든 디스플레이 모드에 대해 화면 너비/높이에 맞는 디스플레이 모드를 찾음
	// 적합한 것을 찾으면 모니터의 새로고침 비율의 분모와 분자값을 저장
	numerator = 0;
	denominator = 0;
	
	for (i = 0; i < numModes; i++)
	{ 
		if (displayModeList[i].Width == (unsigned int)screenWidth) 
		{ 
			if (displayModeList[i].Height == (unsigned int)screenHeight) 
			{ 
				numerator = displayModeList[i].RefreshRate.Numerator; 
				denominator = displayModeList[i].RefreshRate.Denominator; 
			} 
		} 
	}



	// 마지막으로 그래픽 카드의 이름과 
	// 사용 가능한 그래픽 카드 메모리의 크기를 어댑터를 이용해 받아옴


	// 어댑터(그래픽카드)의 description을 가져옴
	result = adapter->GetDesc(&adapterDesc);
	if (FAILED(result))
	{
		return false;
	}

	// 현재 그래픽 카드의 메모리 용량을 MB 단위로 저장
	m_videoCardMemory = (int)(adapterDesc.DedicatedVideoMemory / 1024 / 1024);

	// 그래픽 카드의 이름을 char형 문자열 배열로 바꾼 뒤 저장
	error = wcstombs_s(&stringLength, m_videoCardDescription,
		128, adapterDesc.Description, 128);
	if (error != 0)
	{
		return false;
	}


	// 저장된 새로고침 비율의 분자,분모값과 GPU 정보를 얻었으므로
	// 사용한 구조체들과 인터페이스들을 해제
	 

	// 디스플레이 모드 리스트 할당을 해제
	delete[] displayModeList;
	displayModeList = 0;

	// 출력 어댑터 할당 해체
	adapterOutput->Release();
	adapterOutput = 0;

	// 어댑터 할당 해제
	adapter->Release();
	adapter = 0;

	// 팩토리 객체 할당 해제
	factory->Release();
	factory = 0;


	// 시스템에서 얻어온 주사율로 DirectX를 초기화
	// 스왑 체인의 description 구조체를 채워야함
	// 스왑 체인은 실제 렌더링을 한 곳이 기록되는 프론트버퍼와 백버퍼
	// 보통 렌더링을 할 땐 하나의 백버퍼만 사용하여
	// 그 위에 장면을 그린 뒤, 프론트 버퍼와 swap하여 화면에 보이게됨


	// 스왑 체인 description을 초기화
	ZeroMemory(&swapChainDesc, sizeof(swapChainDesc));

	// 하나의 백버퍼만을 사용하도록 합니다.
	swapChainDesc.BufferCount = 1;

	// 백버퍼의 너비와 높이를 설정
	swapChainDesc.BufferDesc.Width = screenWidth;
	swapChainDesc.BufferDesc.Height = screenHeight;

	// 백버퍼로 일반적인 32bit의 서페이스를 지정
	swapChainDesc.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;


	// 주사율 설정. 1초당 몇 장의 백버플 프론트버퍼와 바꿔치기 하는지
	// vsync가 true라면 수직동기화 on
	// vsync가 false라면 프로그램은 1초에 최대한 빠르게 화면을 그리려함
	// 이것은 화면 일부에 결점을 남기게 됨


	// 백버퍼의 새로고침 비율을 설정
	if (m_vsync_enabled)
	{
		// 수직동기화 on
		swapChainDesc.BufferDesc.RefreshRate.Numerator = numerator;
		swapChainDesc.BufferDesc.RefreshRate.Denominator = denominator;
	}
	else
	{
		swapChainDesc.BufferDesc.RefreshRate.Numerator = 0;
		swapChainDesc.BufferDesc.RefreshRate.Denominator = 1;
	}

	// 백버퍼의 용도를 설정
	swapChainDesc.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;

	// 렌더링이 이루어질 윈도우의 핸들 설정
	swapChainDesc.OutputWindow = hwnd;

	// 멀티 샘플링을 끔
	swapChainDesc.SampleDesc.Count = 1;
	swapChainDesc.SampleDesc.Quality = 0;

	// 윈도우 모드 또는 풀스크린 모드를 설정
	if (fullscreen)
	{
		swapChainDesc.Windowed = false;
	}
	else
	{
		swapChainDesc.Windowed = true;
	}

	// 스캔라인의 정렬과 스캔라이닝을 지정되지 않음(unspecified)으로 설정
	swapChainDesc.BufferDesc.ScanlineOrdering = DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED;
	swapChainDesc.BufferDesc.Scaling = DXGI_MODE_SCALING_UNSPECIFIED;

	// 출력된 이후의 백버퍼의 내용을 버리도록함
	swapChainDesc.SwapEffect = DXGI_SWAP_EFFECT_DISCARD;

	// 추가 옵션 플래그를 사용하지 않음
	swapChainDesc.Flags = 0;


	// 피쳐 레벨이라는 변수를 설정
	// 우리가 어느 버전의 DirectX를 사용할 것인지 알려줌


	// 피쳐 레벨을 DirectX 11로 설정
	featureLevel = D3D_FEATURE_LEVEL_11_0;


	// 스왑체인, Direct3D 장치, Direct3D 장치 컨텍스트를 만들 수 있음
	// 장치, 장치 컨텍스트는 모든 Direct3D들의 인터페이스가 됨
	// 이제부턴 장치와 장치 컨텍스트를 사용해 대부분의 작업을 수행
	// DirectX 11을 지원하지 않는 그래픽카드라면 생성 함수가 실패
	// 만약 없다면 D3D_DRIVER_TYPE_HARDWARE를 D3D_DRIVER_TYPE_REFERENCE로 변경
	// 이를 통해 CPU 렌더링을 하게 되지만 느림


	// 스왑체인, Direct3D 디바이스, Direct3D 디바이스 컨택스트 생성
	result = D3D11CreateDeviceAndSwapChain(NULL, D3D_DRIVER_TYPE_HARDWARE, NULL,
		0, &featureLevel, 1, D3D11_SDK_VERSION, &swapChainDesc, &m_swapChain,
		&m_device, NULL, &m_deviceContext);
	if (FAILED(result))
	{
		return false;
	}


	// 백버퍼의 포인터를 받아와 스왑체인에 연결시킴

	
	// 백버퍼의 포인터를 가져옴
	result = m_swapChain->GetBuffer(0, __uuidof(ID3D11Texture2D), (LPVOID*)&backBufferPtr);
	if (FAILED(result))
	{
		return false;
	}

	// 백버퍼의 포인터로 랜더타겟 뷰를 생성
	result = m_device->CreateRenderTargetView(backBufferPtr, NULL, &m_renderTargetView);
	if (FAILED(result))
	{
		return false;
	}

	// 백버퍼 포인터를 더이상 사용하지 않으므로 할당 해제
	backBufferPtr->Release();
	backBufferPtr = 0;


	// 깊이 버퍼의 description 구조체 작성
	// 이를 이용해 깊이 버퍼를 만들어야 3D 공간에서 폴리곤이 올바르게 그려짐
	// 스텐실 버퍼도 이 깊이 버퍼에 연결해 모션블러, 볼류매트릭 그림자의 효과를 냄


	// 깊이 버퍼의 description을 초기화
	ZeroMemory(&depthBufferDesc, sizeof(depthBufferDesc));

	// 깊이 버퍼의 description을 작성
	depthBufferDesc.Width = screenWidth;
	depthBufferDesc.Height = screenHeight;
	depthBufferDesc.MipLevels = 1;
	depthBufferDesc.ArraySize = 1;
	depthBufferDesc.Format = DXGI_FORMAT_D24_UNORM_S8_UINT;
	depthBufferDesc.SampleDesc.Count = 1;
	depthBufferDesc.SampleDesc.Quality = 0;
	depthBufferDesc.Usage = D3D11_USAGE_DEFAULT;
	depthBufferDesc.BindFlags = D3D11_BIND_DEPTH_STENCIL;
	depthBufferDesc.CPUAccessFlags = 0;
	depthBufferDesc.MiscFlags = 0;


	// 정보들로 깊이/스탠실 버퍼를 생성
	// 버퍼 역시 2D 텍스쳐임
	// 폴리곤들이 정렬되고 래스터화 된 이후에 2D 좌표의 픽셀들이 되기 때문


	// desription을 사용하여 깊이 버퍼의 텍스처를 생성
	result = m_device->CreateTexture2D(&depthBufferDesc, NULL, &m_depthStencilBuffer);
	if (FAILED(result))
	{
		return false;
	}


	// 깊이-스텐실 description을 작성
	// 우리가 direct3D에서 각 픽셀에 어떤 깊이 텍스트를 할 것인지 정할 수 있게됨


	// 스텐실 상태의 description을 초기화
	ZeroMemory(&depthStencilDesc, sizeof(depthStencilDesc));

	// 스텐실 상태의 description을 작성
	depthStencilDesc.DepthEnable = true;
	depthStencilDesc.DepthWriteMask = D3D11_DEPTH_WRITE_MASK_ALL;
	depthStencilDesc.DepthFunc = D3D11_COMPARISON_LESS;

	depthStencilDesc.StencilEnable = true;
	depthStencilDesc.StencilReadMask = 0xFF;
	depthStencilDesc.StencilWriteMask = 0xFF;

	// 픽셀이 프론트패싱인 경우의 스텐실 함수
	depthStencilDesc.FrontFace.StencilFailOp = D3D11_STENCIL_OP_KEEP;
	depthStencilDesc.FrontFace.StencilDepthFailOp = D3D11_STENCIL_OP_INCR;
	depthStencilDesc.FrontFace.StencilPassOp = D3D11_STENCIL_OP_KEEP;
	depthStencilDesc.FrontFace.StencilFunc = D3D11_COMPARISON_ALWAYS;

	// 픽셀이 백패싱인 경우의 스텐실 함수
	depthStencilDesc.BackFace.StencilFailOp = D3D11_STENCIL_OP_KEEP;
	depthStencilDesc.BackFace.StencilDepthFailOp = D3D11_STENCIL_OP_DECR;
	depthStencilDesc.BackFace.StencilPassOp = D3D11_STENCIL_OP_KEEP;
	depthStencilDesc.BackFace.StencilFunc = D3D11_COMPARISON_ALWAYS;

	// 깊이-스텐실 상태 변수를 생성
	result = m_device->CreateDepthStencilState(&depthStencilDesc, &m_depthStencilState);
	if (FAILED(result))
	{
		return false;
	}

	// 깊이-스텐실 상태를 설정
	m_deviceContext->OMSetDepthStencilState(m_depthStencilState, 1);

	
	// 깊이-스텐실 버퍼의 뷰에 대한 description
	// 이 작업을 해야 direct3D가 깊이 버퍼를 깊이-스텐실 텍스쳐로 인식함
	// 이 구조체를 채우고 난 후에 CreateDepthStencilVIew 함수를 호출해 뷰를 생성


	// 깊이-스텐실 뷰의 description을 초기화
	ZeroMemory(&depthStencilViewDesc, sizeof(depthStencilViewDesc));

	// 깊이-스텐실 뷰의 description을 작성
	depthStencilViewDesc.Format = DXGI_FORMAT_D24_UNORM_S8_UINT;
	depthStencilViewDesc.ViewDimension = D3D11_DSV_DIMENSION_TEXTURE2D;
	depthStencilViewDesc.Texture2D.MipSlice = 0;

	// 깊이-스텐실 뷰를 생성
	result = m_device->CreateDepthStencilView(m_depthStencilBuffer,
		&depthStencilViewDesc, &m_depthStencilView);
	if (FAILED(result))
	{
		return false;
	}


	// OMSetRenderTarget 함수는 렌더타겟 뷰와 깊이-스텐실 뷰를
	// 출력 렌더링 파이프라인에 바인딩시킴
	// 파이프라인을 이용한 렌더링이 수행될 때 만들었던 백버퍼에 장면이 그려짐
	

	// 렌더타겟 뷰와 깊이-스텐실 버퍼를 각각 출력 파이프라인에 바인딩
	m_deviceContext->OMSetRenderTargets(1, &m_renderTargetView, m_depthStencilView);

	
	// 렌더타겟이 설정된 뒤 앞으로의 예제를 위한 추가적인 기능들 설정 가능
	// 레스터화기 상태(rasterizer state) : 도형이 어떻게 픽셀로 그려지는 지에 대한
	// 제어를 할 수 있게 해줌. 화면을 와이어프레임 모드로 그리거나
	// 도형의 앞뒷면을 모드 그리도록 할 수 있음
	// DirectX 기본 래스터화기 상태지만, 직접 만들지 않는 이상 제어권이 없음

	
	// 어떤 도형을 어떻게 그릴 것인지 결정하는 래스터화기 description
	rasterDesc.AntialiasedLineEnable = false;
	rasterDesc.CullMode = D3D11_CULL_BACK;
	rasterDesc.DepthBias = 0;
	rasterDesc.DepthBiasClamp = 0.0f;
	rasterDesc.DepthClipEnable = true;
	rasterDesc.FillMode = D3D11_FILL_SOLID;
	rasterDesc.FrontCounterClockwise = false;
	rasterDesc.MultisampleEnable = false;
	rasterDesc.ScissorEnable = false;
	rasterDesc.SlopeScaledDepthBias = 0.0f;


	// 작성한 description으로 부터 래스터화기 상태를 생성
	result = m_device->CreateRasterizerState(&rasterDesc, &m_rasterState);
	if (FAILED(result))
	{
		return false;
	}

	// 래스터화기 상태를 설정
	m_deviceContext->RSSetState(m_rasterState);


	// 뷰포트가 있어야 렌더타겟 공간에서 클리핑 수행 가능
	// 윈도우 전체 크기와 동일하게 설정


	// 렌더링을 위한 뷰포트설정
	viewport.Width = (float)screenWidth;
	viewport.Height = (float)screenHeight;
	viewport.MinDepth = 0.0f;
	viewport.MaxDepth = 1.0f;
	viewport.TopLeftX = 0.0f;
	viewport.TopLeftY = 0.0f;

	// 뷰포트 생성
	m_deviceContext->RSSetViewports(1, &viewport);


	// 투영 행렬(projection matrix)생성
	// 투영 행렬은 3D 화면을 앞서 만든 2D 뷰포트 공간으로 변환하도록 해줌
	// 행렬의 복사본을 만들어 셰이더에서 장면을 그릴 때 사용할 수 있도록 해야함
	

	// 투영 행렬을 설정
	fieldOfView = (float)XM_PI / 4.0f;
	screenAspect = (float)screenWidth / (float)screenHeight;

	// 3D 렌더링을 위한 투영 행렬을 생성
	//D3DXMatrixPerspectiveFovLH(&m_projectionMatrix, fieldOfView,
	//	screenAspect, screenNear, screenDepth);
	m_projectionMatrix = XMMatrixPerspectiveFovLH(fieldOfView,
		screenAspect, screenNear, screenDepth);


	// 월드 행렬을 만듬. 오브젝트들의 좌표를 3D 세게 좌표로 변환하는데 사용
	// 3차원 공간에서의 회전/이동/크기 변환에도 사용
	// 이 행렬을 단위 행렬로 만들고 복사본을 만듬
	// 복사본도 셰이더에 전달되어 사용할 수 있게 함


	// 월드 행렬을 단위 행렬로 초기화
	//D3DXMatrixIdentity(&m_worldMatrix);
	m_worldMatrix = XMMatrixIdentity();


	// 보통 뷰를 생성. 뷰 행렬은 현재 장면에서 
	// 어느 위치에서 어느 방향을 보고 있는가를 계산하는 데 쓰임
	// 3D 세계의 카메라에 대한 행렬, 나중에 설명
	
	// 마지막 작업은 직교 투형 행렬을 만드는 것
	// 이 행렬은 3D객체가 아닌 UI와 같은 2D 요소들을 그리기 위해 사용
	// 2D 그래픽과 폰트를 다루는 예제에 사용


	// 2D 렌더링에 사용될 직교 투영 행렬을 생성
	//D3DXMatrixOrthoLH(&m_orthoMatrix, (float)screenWidth, (float)screenHeight,
	//	screenNear, screenDepth);
	m_orthoMatrix = XMMatrixOrthographicLH((float)screenWidth, (float)screenHeight,
		screenNear, screenDepth);

	return true;
}


// Init에서 사용한 포인터들을 해제하고 정리
// 먼저 스왑 체인을 윈도우 모드로 바꾸는 함수를 호출
// 이 작업을 하지 않고 풀스크린 상태에서 스왑체인을 해제하면
// 몇몇 예외가 발생하기 때문에 Direct3D를 종료하기 전에
// 언제나 스왑 체인을 윈도우 모드로 바꿔야함
void D3DClass::Shutdown()
{
	// 종료하기 전에 이렇게 윈도우로 바꾸지 안으면
	// 스왑체인을 할당 해체할 때 예외가 발생
	if (m_swapChain)
	{
		m_swapChain->SetFullscreenState(false, NULL);
	}

	if (m_rasterState)
	{
		m_rasterState->Release();
		m_rasterState = 0;
	}

	if (m_depthStencilView)
	{
		m_depthStencilView->Release();
		m_depthStencilView = 0;
	}

	if (m_depthStencilState)
	{
		m_depthStencilState->Release();
		m_depthStencilState = 0;
	}

	if (m_depthStencilBuffer)
	{
		m_depthStencilBuffer->Release();
		m_depthStencilBuffer = 0;
	}

	if (m_renderTargetView)
	{
		m_renderTargetView->Release();
		m_renderTargetView = 0;
	}

	if (m_deviceContext)
	{
		m_deviceContext->Release();
		m_deviceContext = 0;
	}

	if (m_device)
	{
		m_device->Release();
		m_device = 0;
	}

	if (m_swapChain)
	{
		m_swapChain->Release();
		m_swapChain = 0;
	}

	return;
}


// 매 프레임의 시작마다 3D 화면을 그리기 시작할 때 호출
// 버퍼를 빈 값으로 초기화하고 렌더링이 이루어지도록 준비
void D3DClass::BeginScene(float red, float green, float blue, float alpha)
{
	float color[4];

	// 버퍼를 어떤 색상으로 지울 것인지 설정
	color[0] = red;
	color[1] = green;
	color[2] = blue;
	color[3] = alpha;

	// 백버퍼의 내용을 지움
	m_deviceContext->ClearRenderTargetView(m_renderTargetView, color);

	// 깊이 버버를 지움
	m_deviceContext->ClearDepthStencilView(m_depthStencilView, D3D11_CLEAR_DEPTH,
		1.0f, 0);

	return;
}

// 매 프레임의 마지막에 스왑 체인에게 백버퍼에 그린 3D화면을 포시하도록 하게 함
void D3DClass::EndScene()
{
	// 렌더링이 완료되었으므로 백버퍼의 내용을 화면에 표시
	if (m_vsync_enabled)
	{
		// 새로고침 비율을 고정
		m_swapChain->Present(1, 0);
	}
	else
	{
		// 가능한 빠르게 표시
		m_swapChain->Present(0, 0);
	}

	return;
}

// 도우미 함수들

// 단순히 Direct3D 디바이스 포인터를 가져오는 함수
// 프레임워크에서 종종 호출됨
ID3D11Device* D3DClass::GetDevice()
{
	return m_device;
}


// 단순히 Direct3D 디바이스 컨텍스트 포인터를 가져오는 함수
// 프레임워크에서 종종 호출됨
ID3D11DeviceContext* D3DClass::GetDeviceContext()
{
	return m_deviceContext;
}

// 투영 행렬을 반환
// 대부분의 셰이더에서는 이행렬을 필요로함
void D3DClass::GetProjectionMatrix(XMMATRIX& projectionMatrix)
{
	projectionMatrix = m_projectionMatrix;
	return;
}

// 월드 행렬을 반환
// 대부분의 셰이더에서는 이행렬을 필요로함
void D3DClass::GetWorldMatrix(XMMATRIX& worldMatrix)
{
	worldMatrix = m_worldMatrix;
	return;
}

// 직교 투영 행렬을 반환
// 대부분의 셰이더에서는 이행렬을 필요로함
void D3DClass::GetOrthoMatrix(XMMATRIX& orthoMatrix)
{
	orthoMatrix = m_orthoMatrix;
	return;
}

// 그래픽 카드 이름과 사용가능한 메모리 양을 반환
// 서로 다른 설정에서 디버깅하는 데 도움됨
void D3DClass::GetVideoCardInfo(char* cardName, int& memory)
{
	strcpy_s(cardName, 128, m_videoCardDescription);
	memory = m_videoCardMemory;

	return;
}